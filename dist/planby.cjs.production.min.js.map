{"version":3,"file":"planby.cjs.production.min.js","sources":["../src/Epg/styles/global.styles.ts","../src/Epg/styles/Epg.styles.ts","../src/Epg/styles/Channels.styles.ts","../src/Epg/styles/Channel.styles.ts","../src/Epg/styles/Program.styles.ts","../src/Epg/helpers/common.ts","../src/Epg/helpers/time.ts","../src/Epg/helpers/variables.ts","../src/Epg/helpers/epg.ts","../src/Epg/styles/Timeline.styles.ts","../src/Epg/styles/Line.styles.ts","../src/Epg/styles/Loader.styles.ts","../src/Epg/components/Layout.tsx","../src/Epg/theme/theme.ts","../src/Epg/hooks/useEpg.tsx","../src/Epg/hooks/useInterval.tsx","../src/Epg/hooks/useProgram.tsx","../src/Epg/hooks/useTimeline.tsx","../src/Epg/components/Program.tsx","../src/Epg/components/Channels.tsx","../src/Epg/components/Channel.tsx","../src/Epg/components/Timeline.tsx","../src/Epg/components/Line/Line.tsx","../src/Epg/components/Line/useLine.tsx","../src/Epg/components/Loader.tsx","../src/Epg/Epg.tsx","../src/Epg/index.ts","../src/Epg/hooks/useLayout.tsx"],"sourcesContent":["import { css } from \"@emotion/react\";\r\n\r\nexport const globalStyles = css`\r\n  @import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\");\r\n\r\n  .planby {\r\n    font-family: \"Inter\", system-ui, -apple-system,\r\n      /* Firefox supports this but not yet system-ui */ \"Segoe UI\", Roboto,\r\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\"; /* 2 */\r\n  }\r\n`;\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { Theme } from \"../helpers\";\r\n\r\nexport const Container = styled.div<{\r\n  height?: number;\r\n  width?: number;\r\n}>`\r\n  padding: 5px;\r\n  height: ${({ height }) => (height ? `${height}px` : \"100%\")};\r\n  width: ${({ width }) => (width ? `${width}px` : \"100%\")};\r\n\r\n  *,\r\n  ::before,\r\n  ::after {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const ScrollBox = styled.div<{ theme?: Theme; isRTL?: boolean }>`\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  overflow: auto;\r\n  scroll-behavior: smooth;\r\n  background: ${({ theme }) => theme.primary[900]};\r\n\r\n  ${({ isRTL }) => isRTL && `transform: scale(-1,1)`};\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 10px;\r\n    height: 10px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: ${({ theme }) => theme.scrollbar.thumb.bg};\r\n    border: 10px none ${({ theme }) => theme.white};\r\n    border-radius: 20px;\r\n  }\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: ${({ theme }) => theme.white};\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: ${({ theme }) => theme.primary[900]};\r\n    border: 22px none ${({ theme }) => theme.white};\r\n    border-radius: 0px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-corner {\r\n    background: ${({ theme }) => theme.primary[900]};\r\n  }\r\n`;\r\n\r\nexport const Box = styled.div<{\r\n  isRTL?: boolean;\r\n  width: number;\r\n  height: number;\r\n  left?: number;\r\n  top?: number;\r\n  theme?: Theme;\r\n}>`\r\n  position: absolute;\r\n  height: ${({ height }) => height}px;\r\n  width: ${({ width }) => width}px;\r\n  top: ${({ top = 0 }) => top}px;\r\n  background: ${({ theme }) => theme.primary[900]};\r\n  z-index: 90;\r\n\r\n  ${({ isRTL, left = 0 }) => (isRTL ? `right:0px;` : ` left: ${left}px`)};\r\n`;\r\n\r\nexport const Content = styled.div<{\r\n  width: number;\r\n  height: number;\r\n  sidebarWidth: number;\r\n  isSidebar: boolean;\r\n  theme?: Theme;\r\n}>`\r\n  background: ${({ theme }) => theme.primary[900]};\r\n  height: ${({ height }) => height}px;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  left: ${({ isSidebar, sidebarWidth }) => (isSidebar ? sidebarWidth : 0)}px;\r\n`;\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { Theme } from \"../helpers\";\r\n\r\nexport const Box = styled.div<{\r\n  isTimeline: boolean;\r\n  isRTL: boolean;\r\n  width: number;\r\n  bottom: number;\r\n  theme?: Theme;\r\n}>`\r\n  position: sticky;\r\n  width: ${({ width }) => width}px;\r\n  float: left;\r\n  bottom: ${({ bottom }) => bottom}px;\r\n  left: 0;\r\n  z-index: 5;\r\n  background-color: ${({ theme }) => theme.primary[900]};\r\n\r\n  ${({ isRTL }) => isRTL && `transform: scale(-1,1)`};\r\n`;\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { Theme } from \"../helpers\";\r\n\r\nexport const ChannelBox = styled.div<{\r\n  top: number;\r\n  height: number;\r\n  theme?: Theme;\r\n}>`\r\n  position: absolute;\r\n  top: ${({ top }) => top}px;\r\n  height: ${({ height }) => height}px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: ${({ theme }) => theme.primary[900]};\r\n`;\r\n\r\nexport const ChannelLogo = styled.img`\r\n  max-height: 60px;\r\n  max-width: 60px;\r\n  position: relative;\r\n`;\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { Theme } from \"../helpers\";\r\n\r\nexport const ProgramBox = styled.div<{ width: number }>`\r\n  position: absolute;\r\n  padding: ${({ width }) => (width === 0 ? 0 : 4)}px;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const ProgramContent = styled.div<{\r\n  isLive: boolean;\r\n  width: number;\r\n  theme?: Theme;\r\n}>`\r\n  position: relative;\r\n  display: flex;\r\n  font-size: 11px;\r\n  height: 100%;\r\n  border-radius: 8px;\r\n  padding: 10px ${({ width }) => (width < 30 ? 4 : 20)}px;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  transition: all 0.4s ease-in-out;\r\n  z-index: 1;\r\n  background: ${({ theme: { primary } }) =>\r\n    `linear-gradient(to right, ${primary[600]}, ${primary[600]})`};\r\n  &:hover {\r\n    background: ${({ theme: { gradient } }) =>\r\n      `linear-gradient(to right, ${gradient.blue[900]}, ${gradient.blue[600]})`};\r\n  }\r\n\r\n  ${({ isLive, theme: { gradient } }) =>\r\n    isLive &&\r\n    `background: linear-gradient(to right, ${gradient.blue[900]}, ${gradient.blue[600]},${gradient.blue[300]})`}\r\n`;\r\n\r\nexport const ProgramFlex = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nconst Elipsis = `\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nexport const ProgramTitle = styled.p<{ theme?: Theme }>`\r\n  font-size: 14px;\r\n  text-align: left;\r\n  margin-top: 0;\r\n  margin-bottom: 5px;\r\n  font-weight: 500;\r\n  color: ${({ theme }) => theme.grey[300]};\r\n  ${Elipsis}\r\n`;\r\n\r\nexport const ProgramText = styled.span<{ theme?: Theme }>`\r\n  display: block;\r\n  font-size: 12.5px;\r\n  font-weight: 400;\r\n  color: ${({ theme }) => theme.text.grey[500]};\r\n  text-align: left;\r\n  ${Elipsis}\r\n`;\r\n\r\nexport const ProgramImage = styled.img`\r\n  margin-right: 15px;\r\n  border-radius: 6px;\r\n  width: 100px;\r\n`;\r\n\r\nexport const ProgramStack = styled.div<{ isRTL?: boolean }>`\r\n  overflow: hidden;\r\n  ${({ isRTL }) =>\r\n    isRTL &&\r\n    `transform: scale(-1,1); \r\n     display: flex; \r\n     flex-direction: column; \r\n     align-items: flex-end`};\r\n`;\r\n","import { useLayoutEffect, useEffect } from \"react\";\r\nimport { differenceInHours, startOfDay } from \"date-fns\";\r\nimport { HOURS_IN_DAY } from \"./variables\";\r\n\r\ntype DateTime = string | number | Date;\r\n\r\ntype OmitObjectType = { [key: string]: any };\r\nexport const omit = (obj: OmitObjectType, ...props: string[]) => {\r\n  const result = { ...obj };\r\n\r\n  for (const property of props) {\r\n    delete result[property];\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const generateArray = (num: number) => new Array(num).fill(\"\");\r\n\r\ntype ProgramOptions = {\r\n  position: { width: number; height: number; top: number; left: number };\r\n};\r\nexport const getProgramOptions = <T extends ProgramOptions>(program: T) => {\r\n  const { width, height, top, left } = program.position;\r\n  return {\r\n    ...program,\r\n    position: { width, height, top, left },\r\n  };\r\n};\r\n\r\nexport const useIsomorphicLayoutEffect = () =>\r\n  typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\r\n\r\nexport const getHourWidth = (dayWidth: number) => dayWidth / HOURS_IN_DAY;\r\n\r\nexport const getDate = (date: DateTime) => new Date(date);\r\n\r\nconst abs = (num: number) => Math.abs(num);\r\ninterface DayWidth {\r\n  dayWidth: number;\r\n  startDate: DateTime;\r\n  endDate: DateTime;\r\n}\r\nexport const getDayWidthResources = ({\r\n  dayWidth,\r\n  startDate,\r\n  endDate,\r\n}: DayWidth) => {\r\n  const startDateTime = getDate(startDate);\r\n  const endDateTime = getDate(endDate);\r\n\r\n  if (endDateTime < startDateTime) {\r\n    console.error(\r\n      `Invalid endDate property. Value of endDate must be greater than startDate. Props: startDateTime: ${startDateTime}, endDateTime: ${endDateTime}`\r\n    );\r\n  }\r\n\r\n  const offsetStartHoursRange = differenceInHours(\r\n    startDateTime,\r\n    startOfDay(startDateTime)\r\n  );\r\n\r\n  const numberOfHoursInDay = differenceInHours(endDateTime, startDateTime);\r\n  const hourWidth = Math.floor(dayWidth / numberOfHoursInDay);\r\n  const newDayWidth = hourWidth * numberOfHoursInDay;\r\n\r\n  return {\r\n    hourWidth: abs(hourWidth),\r\n    dayWidth: abs(newDayWidth),\r\n    numberOfHoursInDay: abs(numberOfHoursInDay),\r\n    offsetStartHoursRange: abs(offsetStartHoursRange),\r\n  };\r\n};\r\n","import { format, roundToNearestMinutes, startOfDay, addDays } from \"date-fns\";\r\n\r\n// Import types\r\nimport { DateTime as DateRangeTime } from \"./types\";\r\n\r\n// Variables\r\nimport { TIME_FORMAT } from \"./variables\";\r\n\r\ntype DateTime = number | string | Date;\r\n\r\nconst getTime = (date: DateTime) => new Date(date).getTime();\r\n\r\nexport const getLiveStatus = (since: DateTime, till: DateTime) => {\r\n  const nowTime = getTime(new Date());\r\n  const sinceTime = getTime(since);\r\n  const sinceTill = getTime(till);\r\n  return nowTime >= sinceTime && sinceTill > nowTime;\r\n};\r\n\r\nexport const formatTime = (date: DateTime) =>\r\n  format(new Date(date), TIME_FORMAT.DEFAULT).replace(/\\s/g, \"T\");\r\n\r\nexport const roundToMinutes = (date: DateTime) =>\r\n  roundToNearestMinutes(new Date(date));\r\n\r\nexport const isYesterday = (since: DateTime, startDate: DateTime) => {\r\n  const sinceTime = getTime(new Date(since));\r\n  const startDateTime = getTime(new Date(startDate));\r\n\r\n  return startDateTime > sinceTime;\r\n};\r\n\r\nexport const isFutureTime = (date: DateTime) => {\r\n  const dateTime = getTime(new Date(date));\r\n  const now = getTime(new Date());\r\n  return dateTime > now;\r\n};\r\n\r\nexport const getTimeRangeDates = (\r\n  startDate: DateRangeTime,\r\n  endDate: DateRangeTime\r\n) => {\r\n  let endDateValue = endDate;\r\n  if (endDate === \"\") {\r\n    endDateValue = formatTime(startOfDay(addDays(new Date(startDate), 1)));\r\n  }\r\n\r\n  return { startDate, endDate: endDateValue };\r\n};\r\n","// Dimensions\r\nexport const DAY_WIDTH = 7200;\r\nexport const HOURS_IN_DAY = 24;\r\n\r\nexport const HOUR_IN_MINUTES = 60;\r\n\r\nexport const TIMELINE_HEIGHT = 60;\r\n\r\nexport const SIDEBAR_WIDTH = 100;\r\nexport const ITEM_HEIGHT = 80;\r\n\r\nexport const ITEM_OVERSCAN = ITEM_HEIGHT;\r\n\r\n// Debounce\r\nexport const DEBOUNCE_WAIT = 100;\r\nexport const DEBOUNCE_WAIT_MAX = 100;\r\n\r\n// Program refresh\r\nexport const PROGRAM_REFRESH = 120000;\r\n\r\n// Theme\r\nexport const THEME_MODE = {\r\n  DARK: \"dark\",\r\n  LIGHT: \"light\",\r\n};\r\n\r\nexport const TIME_FORMAT = {\r\n  DEFAULT: \"yyyy-MM-dd HH:mm:ss\",\r\n  DATE: \"yyyy-MM-dd\",\r\n  DAY_MONTH: \"dd/MM\",\r\n  HOURS_MIN: \"HH:mm\",\r\n  BASE_HOURS_TIME: \"h:mm a\",\r\n};\r\n","import { differenceInMinutes, getTime } from \"date-fns\";\r\n\r\n// Import interfaces\r\nimport { Channel, Program } from \"./interfaces\";\r\n\r\n// Import types\r\nimport { ProgramWithPosition, Position, DateTime } from \"./types\";\r\n\r\n// Import variables\r\nimport { HOUR_IN_MINUTES } from \"./variables\";\r\n\r\n// Import time heleprs\r\nimport {\r\n  formatTime,\r\n  roundToMinutes,\r\n  isYesterday as isYesterdayTime,\r\n} from \"./time\";\r\nimport { getDate } from \"./common\";\r\n\r\n// -------- Program width --------\r\nconst getItemDiffWidth = (diff: number, hourWidth: number) =>\r\n  (diff * hourWidth) / HOUR_IN_MINUTES;\r\n\r\nexport const getPositionX = (\r\n  since: DateTime,\r\n  till: DateTime,\r\n  startDate: DateTime,\r\n  endDate: DateTime,\r\n  hourWidth: number\r\n) => {\r\n  const isTomorrow = getTime(getDate(till)) > getTime(getDate(endDate));\r\n  const isYesterday = getTime(getDate(since)) < getTime(getDate(startDate));\r\n\r\n  // When time range is set to 1 hour and program time is greater than 1 hour\r\n  if (isYesterday && isTomorrow) {\r\n    const diffTime = differenceInMinutes(\r\n      roundToMinutes(getDate(endDate)),\r\n      getDate(startDate)\r\n    );\r\n    return getItemDiffWidth(diffTime, hourWidth);\r\n  }\r\n\r\n  if (isYesterday) {\r\n    const diffTime = differenceInMinutes(\r\n      roundToMinutes(getDate(till)),\r\n      getDate(startDate)\r\n    );\r\n    return getItemDiffWidth(diffTime, hourWidth);\r\n  }\r\n\r\n  if (isTomorrow) {\r\n    const diffTime = differenceInMinutes(\r\n      getDate(endDate),\r\n      roundToMinutes(getDate(since))\r\n    );\r\n\r\n    if (diffTime < 0) return 0;\r\n    return getItemDiffWidth(diffTime, hourWidth);\r\n  }\r\n\r\n  const diffTime = differenceInMinutes(\r\n    roundToMinutes(getDate(till)),\r\n    roundToMinutes(getDate(since))\r\n  );\r\n\r\n  return getItemDiffWidth(diffTime, hourWidth);\r\n};\r\n\r\n// -------- Channel position in the Epg --------\r\nexport const getChannelPosition = (\r\n  channelIndex: number,\r\n  itemHeight: number\r\n) => {\r\n  const top = itemHeight * channelIndex;\r\n  const position = {\r\n    top,\r\n    height: itemHeight,\r\n  };\r\n  return position;\r\n};\r\n// -------- Program position in the Epg --------\r\nexport const getProgramPosition = (\r\n  program: Program,\r\n  channelIndex: number,\r\n  itemHeight: number,\r\n  hourWidth: number,\r\n  startDate: DateTime,\r\n  endDate: DateTime\r\n) => {\r\n  const item = {\r\n    ...program,\r\n    since: formatTime(program.since),\r\n    till: formatTime(program.till),\r\n  };\r\n  const isYesterday = isYesterdayTime(item.since, startDate);\r\n\r\n  let width = getPositionX(\r\n    item.since,\r\n    item.till,\r\n    startDate,\r\n    endDate,\r\n    hourWidth\r\n  );\r\n  const top = itemHeight * channelIndex;\r\n  let left = getPositionX(startDate, item.since, startDate, endDate, hourWidth);\r\n  const edgeEnd = getPositionX(\r\n    startDate,\r\n    item.till,\r\n    startDate,\r\n    endDate,\r\n    hourWidth\r\n  );\r\n\r\n  if (isYesterday) left = 0;\r\n  // If item has negative top position, it means that it is not visible in this day\r\n  if (top < 0) width = 0;\r\n\r\n  const position = {\r\n    width,\r\n    height: itemHeight,\r\n    top,\r\n    left,\r\n    edgeEnd,\r\n  };\r\n  return { position, data: item };\r\n};\r\n\r\n// -------- Converted programs with position data --------\r\ninterface ConvertedPrograms {\r\n  data: Program[];\r\n  channels: Channel[];\r\n  startDate: DateTime;\r\n  endDate: DateTime;\r\n  itemHeight: number;\r\n  hourWidth: number;\r\n}\r\nexport const getConvertedPrograms = ({\r\n  data,\r\n  channels,\r\n  startDate,\r\n  endDate,\r\n  itemHeight,\r\n  hourWidth,\r\n}: ConvertedPrograms) =>\r\n  data.map((next) => {\r\n    const channelIndex = channels.findIndex(\r\n      ({ uuid }) => uuid === next.channelUuid\r\n    );\r\n    return getProgramPosition(\r\n      next,\r\n      channelIndex,\r\n      itemHeight,\r\n      hourWidth,\r\n      startDate,\r\n      endDate\r\n    );\r\n  }, [] as ProgramWithPosition[]);\r\n\r\n// -------- Converted channels with position data --------\r\nexport const getConvertedChannels = (channels: Channel[], itemHeight: number) =>\r\n  channels.map((channel, index) => ({\r\n    ...channel,\r\n    position: getChannelPosition(index, itemHeight),\r\n  }));\r\n\r\n// -------- Dynamic virtual program visibility in the EPG --------\r\nexport const getItemVisibility = (\r\n  position: Position,\r\n  scrollY: number,\r\n  scrollX: number,\r\n  containerHeight: number,\r\n  containerWidth: number,\r\n  itemOverscan: number\r\n) => {\r\n  if (position.width <= 0) {\r\n    return false;\r\n  }\r\n\r\n  if (scrollY > position.top + itemOverscan * 3) {\r\n    return false;\r\n  }\r\n\r\n  if (scrollY + containerHeight <= position.top) {\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    scrollX + containerWidth >= position.left &&\r\n    scrollX <= position.edgeEnd\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const getSidebarItemVisibility = (\r\n  position: Pick<Position, \"top\">,\r\n  scrollY: number,\r\n  containerHeight: number,\r\n  itemOverscan: number\r\n) => {\r\n  if (scrollY > position.top + itemOverscan * 3) {\r\n    return false;\r\n  }\r\n\r\n  if (scrollY + containerHeight <= position.top) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { Theme } from \"../helpers\";\r\n\r\n// Import heleprs\r\nimport { ITEM_HEIGHT } from \"../helpers\";\r\n\r\nexport const TimelineTime = styled.span<{\r\n  theme?: Theme;\r\n  isBaseTimeFormat?: boolean;\r\n  isRTL?: boolean;\r\n}>`\r\n  color: ${({ theme }) => theme.text.grey[300]};\r\n  position: absolute;\r\n  top: 18px;\r\n  left: ${({ isRTL, isBaseTimeFormat }) =>\r\n    isRTL && isBaseTimeFormat ? \"-32\" : \"-18\"}px;\r\n\r\n  ${({ isRTL }) => isRTL && `transform: scale(-1,1)`};\r\n`;\r\n\r\nexport const TimelineDividers = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  align-items: end;\r\n  padding-bottom: 6px;\r\n`;\r\n\r\nexport const TimelineDivider = styled.div<{ width: number; theme?: Theme }>`\r\n  background: ${({ theme }) => theme.timeline.divider.bg};\r\n  height: 10px;\r\n  width: 1px;\r\n  margin-right: ${({ width }) => width / 4}px;\r\n`;\r\n\r\nexport const TimelineWrapper = styled.div<{\r\n  isSidebar: boolean;\r\n  dayWidth: number;\r\n  sidebarWidth: number;\r\n  theme?: Theme;\r\n}>`\r\n  position: sticky;\r\n  top: 0;\r\n  left: ${({ isSidebar, sidebarWidth }) => (isSidebar ? sidebarWidth : 0)}px;\r\n  z-index: 5;\r\n  display: flex;\r\n  height: ${ITEM_HEIGHT - 20}px;\r\n  width: ${({ dayWidth }) => dayWidth}px;\r\n  background: ${({ theme }) => theme.primary[900]};\r\n`;\r\n\r\nexport const TimelineBox = styled.div<{ width: number }>`\r\n  width: ${({ width }) => width}px;\r\n  font-size: 14px;\r\n  position: relative;\r\n\r\n  &:first-of-type {\r\n    ${TimelineTime} {\r\n      left: 0px;\r\n    }\r\n  }\r\n`;\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { Theme } from \"../helpers\";\r\n\r\nexport const Box = styled.div<{ height: number; left: number; theme?: Theme }>`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: ${({ left }) => left}px;\r\n  height: ${({ height }) => height}px;\r\n  width: 3px;\r\n  background: ${({ theme }) => theme.green[300]};\r\n  pointer-events: none;\r\n  z-index: 10;\r\n`;\r\n","import styled from \"@emotion/styled/macro\";\r\nimport { keyframes } from \"@emotion/react\";\r\nimport { Theme } from \"../helpers\";\r\n\r\nconst time = [0, 50, 0];\r\n\r\nconst moveLeft = (animate: { right: string[] }) => keyframes`\r\n${time.map(\r\n  (item, index) => `${item}% {\r\n  transform: translateX(-${animate.right[index]});\r\n}`\r\n)}\r\n`;\r\n\r\nexport const Box = styled.div<{ theme?: Theme }>`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.loader.bg};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 100;\r\n`;\r\n\r\nexport const Shape = styled.div<{\r\n  width: number;\r\n  color: string;\r\n  marginRight?: number;\r\n  transition: { duration: number; ease?: string; delay?: number };\r\n  animate: { right: string[] };\r\n  theme?: Theme;\r\n}>`\r\n  width: ${({ width }) => width * 0.42}px;\r\n  background: ${({ color }) => color};\r\n  height: 18px;\r\n  border-radius: 45px;\r\n  margin-right: ${({ marginRight }) => marginRight ?? 0}px;\r\n  animation-name: ${({ animate }) => moveLeft(animate)};\r\n  animation-duration: ${({ transition }) => transition.duration}s;\r\n  animation-timing-function: ${({ transition }) =>\r\n    transition.ease ?? \"ease-in-out\"};\r\n  animation-delay: ${({ transition }) => transition.delay ?? 0}s;\r\n  animation-iteration-count: infinite;\r\n`;\r\n","import React from \"react\";\r\n\r\n// Import types\r\nimport {\r\n  ProgramItem,\r\n  ProgramWithPosition,\r\n  ChannelWithPosiiton,\r\n  DateTime,\r\n  Position,\r\n  BaseTimeFormat,\r\n} from \"../helpers/types\";\r\n\r\n// Import helpers\r\nimport { getProgramOptions, isFutureTime } from \"../helpers\";\r\n\r\n// Import styles\r\nimport { EpgStyled } from \"../styles\";\r\n\r\n// Import components\r\nimport { Timeline, Channels, Program, Line } from \"../components\";\r\n\r\ninterface RenderTimeline {\r\n  isBaseTimeFormat: BaseTimeFormat;\r\n  isSidebar: boolean;\r\n  isRTL: boolean;\r\n  sidebarWidth: number;\r\n  hourWidth: number;\r\n  numberOfHoursInDay: number;\r\n  offsetStartHoursRange: number;\r\n  dayWidth: number;\r\n}\r\n\r\ninterface LayoutProps {\r\n  programs: ProgramItem[];\r\n  channels: ChannelWithPosiiton[];\r\n  startDate: DateTime;\r\n  endDate: DateTime;\r\n  scrollY: number;\r\n  dayWidth: number;\r\n  hourWidth: number;\r\n  numberOfHoursInDay: number;\r\n  offsetStartHoursRange: number;\r\n  sidebarWidth: number;\r\n  itemHeight: number;\r\n  onScroll: (\r\n    e: React.UIEvent<HTMLDivElement, UIEvent> & { target: Element }\r\n  ) => void;\r\n  isRTL?: boolean;\r\n  isBaseTimeFormat?: BaseTimeFormat;\r\n  isSidebar?: boolean;\r\n  isTimeline?: boolean;\r\n  isLine?: boolean;\r\n  isProgramVisible: (position: Position) => boolean;\r\n  isChannelVisible: (position: Pick<Position, \"top\">) => boolean;\r\n  renderProgram?: (v: {\r\n    program: ProgramItem;\r\n    isRTL: boolean;\r\n    isBaseTimeFormat: BaseTimeFormat;\r\n  }) => React.ReactNode;\r\n  renderChannel?: (v: { channel: ChannelWithPosiiton }) => React.ReactNode;\r\n  renderTimeline?: (v: RenderTimeline) => React.ReactNode;\r\n}\r\n\r\nconst { ScrollBox, Content } = EpgStyled;\r\n\r\nexport const Layout = React.forwardRef<HTMLDivElement, LayoutProps>(\r\n  (props, scrollBoxRef) => {\r\n    const { channels, programs, startDate, endDate, scrollY } = props;\r\n    const { dayWidth, hourWidth, sidebarWidth, itemHeight } = props;\r\n    const { numberOfHoursInDay, offsetStartHoursRange } = props;\r\n    const {\r\n      isSidebar = true,\r\n      isTimeline = true,\r\n      isLine = true,\r\n      isBaseTimeFormat = false,\r\n      isRTL = false,\r\n    } = props;\r\n\r\n    const {\r\n      onScroll,\r\n      isProgramVisible,\r\n      isChannelVisible,\r\n      renderProgram,\r\n      renderChannel,\r\n      renderTimeline,\r\n    } = props;\r\n\r\n    const channelsLength = channels.length;\r\n    const contentHeight = React.useMemo(() => channelsLength * itemHeight, [\r\n      channelsLength,\r\n      itemHeight,\r\n    ]);\r\n    const isFuture = isFutureTime(endDate);\r\n\r\n    const renderPrograms = (program: ProgramWithPosition) => {\r\n      const { position } = program;\r\n      const isVisible = isProgramVisible(position);\r\n\r\n      if (isVisible) {\r\n        const options = getProgramOptions(program);\r\n        if (renderProgram)\r\n          return renderProgram({\r\n            program: options,\r\n            isRTL,\r\n            isBaseTimeFormat,\r\n          });\r\n        return (\r\n          <Program\r\n            key={program.data.id}\r\n            isRTL={isRTL}\r\n            isBaseTimeFormat={isBaseTimeFormat}\r\n            program={options}\r\n          />\r\n        );\r\n      }\r\n      return null;\r\n    };\r\n\r\n    const renderTopbar = () => {\r\n      const props = {\r\n        sidebarWidth,\r\n        isSidebar,\r\n        isRTL,\r\n        dayWidth,\r\n        numberOfHoursInDay,\r\n      };\r\n      const timeProps = {\r\n        offsetStartHoursRange,\r\n        numberOfHoursInDay,\r\n        isBaseTimeFormat,\r\n        hourWidth,\r\n      };\r\n      if (renderTimeline) {\r\n        return renderTimeline({ ...timeProps, ...props });\r\n      }\r\n      return <Timeline {...timeProps} {...props} />;\r\n    };\r\n\r\n    return (\r\n      <ScrollBox isRTL={isRTL} ref={scrollBoxRef} onScroll={onScroll}>\r\n        {isLine && isFuture && (\r\n          <Line\r\n            dayWidth={dayWidth}\r\n            hourWidth={hourWidth}\r\n            sidebarWidth={sidebarWidth}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            height={contentHeight}\r\n          />\r\n        )}\r\n        {isTimeline && renderTopbar()}\r\n        {isSidebar && (\r\n          <Channels\r\n            isRTL={isRTL}\r\n            isTimeline={isTimeline}\r\n            isChannelVisible={isChannelVisible}\r\n            sidebarWidth={sidebarWidth}\r\n            channels={channels as ChannelWithPosiiton[]}\r\n            scrollY={scrollY}\r\n            renderChannel={renderChannel}\r\n          />\r\n        )}\r\n        <Content\r\n          data-testid=\"content\"\r\n          sidebarWidth={sidebarWidth}\r\n          isSidebar={isSidebar}\r\n          width={dayWidth}\r\n          height={contentHeight}\r\n        >\r\n          {programs.map((program) =>\r\n            renderPrograms(program as ProgramWithPosition)\r\n          )}\r\n        </Content>\r\n      </ScrollBox>\r\n    );\r\n  }\r\n);\r\n","export const theme = {\r\n  primary: {\r\n    600: \"#1a202c\",\r\n    900: \"#171923\",\r\n  },\r\n  grey: { 300: \"#d1d1d1\" },\r\n  white: \"#fff\",\r\n  green: {\r\n    300: \"#2C7A7B\",\r\n  },\r\n  loader: {\r\n    teal: \"#5DDADB\",\r\n    purple: \"#3437A2\",\r\n    pink: \"#F78EB6\",\r\n    bg: \"#171923db\",\r\n  },\r\n  scrollbar: {\r\n    border: \"#ffffff\",\r\n    thumb: {\r\n      bg: \"#e1e1e1\",\r\n    },\r\n  },\r\n\r\n  gradient: {\r\n    blue: {\r\n      300: \"#002eb3\",\r\n      600: \"#002360\",\r\n      900: \"#051937\",\r\n    },\r\n  },\r\n\r\n  text: {\r\n    grey: {\r\n      300: \"#a0aec0\",\r\n      500: \"#718096\",\r\n    },\r\n  },\r\n\r\n  timeline: {\r\n    divider: {\r\n      bg: \"#718096\",\r\n    },\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport { startOfToday } from \"date-fns\";\r\n\r\n// Import interfaces\r\nimport { Channel, Program, Theme } from \"../helpers/interfaces\";\r\n\r\n// Import types\r\nimport { DateTime, BaseTimeFormat, Position } from \"../helpers/types\";\r\n\r\n// Import helpers\r\nimport {\r\n  DAY_WIDTH,\r\n  ITEM_HEIGHT,\r\n  ITEM_OVERSCAN,\r\n  getDayWidthResources,\r\n  getTimeRangeDates,\r\n} from \"../helpers\";\r\n\r\n// Import theme\r\nimport { theme as defaultTheme } from \"../theme\";\r\n\r\n// Import heleprs\r\nimport {\r\n  SIDEBAR_WIDTH,\r\n  formatTime,\r\n  getConvertedChannels,\r\n  getConvertedPrograms,\r\n  getItemVisibility,\r\n  getSidebarItemVisibility,\r\n} from \"../helpers\";\r\n\r\n// Import components\r\nimport { useLayout } from \"./useLayout\";\r\n\r\ninterface useEpgProps {\r\n  channels: Channel[];\r\n  epg: Program[];\r\n  width?: number;\r\n  height?: number;\r\n  startDate?: DateTime;\r\n  endDate?: DateTime;\r\n  isBaseTimeFormat?: BaseTimeFormat;\r\n  isSidebar?: boolean;\r\n  isTimeline?: boolean;\r\n  isRTL?: boolean;\r\n  isLine?: boolean;\r\n  theme?: Theme;\r\n  globalStyles?: string;\r\n  dayWidth?: number;\r\n  sidebarWidth?: number;\r\n  itemHeight?: number;\r\n  itemOverscan?: number;\r\n}\r\n\r\nconst defaultStartDateTime = formatTime(startOfToday());\r\n\r\nexport function useEpg({\r\n  channels: channelsEpg,\r\n  epg,\r\n  startDate: startDateInput = defaultStartDateTime,\r\n  endDate: endDateInput = \"\",\r\n  isRTL = false,\r\n  isBaseTimeFormat = false,\r\n  isSidebar = true,\r\n  isTimeline = true,\r\n  isLine = true,\r\n  theme: customTheme,\r\n  globalStyles,\r\n  dayWidth: customDayWidth = DAY_WIDTH,\r\n  sidebarWidth = SIDEBAR_WIDTH,\r\n  itemHeight = ITEM_HEIGHT,\r\n  itemOverscan = ITEM_OVERSCAN,\r\n  width,\r\n  height,\r\n}: useEpgProps) {\r\n  // Get converted start and end dates\r\n  const { startDate, endDate } = getTimeRangeDates(\r\n    startDateInput,\r\n    endDateInput\r\n  );\r\n\r\n  // Get day and hour width of the day\r\n  const { hourWidth, dayWidth, ...dayWidthResourcesProps } = React.useMemo(\r\n    () =>\r\n      getDayWidthResources({ dayWidth: customDayWidth, startDate, endDate }),\r\n    [customDayWidth, startDate, endDate]\r\n  );\r\n\r\n  // -------- Effects --------\r\n  const { containerRef, scrollBoxRef, ...layoutProps } = useLayout({\r\n    startDate,\r\n    endDate,\r\n    sidebarWidth,\r\n    width,\r\n    height,\r\n    hourWidth,\r\n  });\r\n\r\n  const { scrollX, scrollY, layoutWidth, layoutHeight } = layoutProps;\r\n  const {\r\n    onScroll,\r\n    onScrollToNow,\r\n    onScrollTop,\r\n    onScrollLeft,\r\n    onScrollRight,\r\n  } = layoutProps;\r\n\r\n  //-------- Variables --------\r\n  const channels = React.useMemo(\r\n    () => getConvertedChannels(channelsEpg, itemHeight),\r\n    [channelsEpg, itemHeight]\r\n  );\r\n\r\n  const startDateTime = formatTime(startDate);\r\n  const endDateTime = formatTime(endDate);\r\n  const programs = React.useMemo(\r\n    () =>\r\n      getConvertedPrograms({\r\n        data: epg,\r\n        channels,\r\n        startDate: startDateTime,\r\n        endDate: endDateTime,\r\n        itemHeight,\r\n        hourWidth,\r\n      }),\r\n    [epg, channels, startDateTime, endDateTime, itemHeight, hourWidth]\r\n  );\r\n\r\n  const theme: Theme = customTheme || defaultTheme;\r\n\r\n  // -------- Handlers --------\r\n  const isProgramVisible = React.useCallback(\r\n    (position: Position) =>\r\n      getItemVisibility(\r\n        position,\r\n        scrollY,\r\n        scrollX,\r\n        layoutHeight,\r\n        layoutWidth,\r\n        itemOverscan\r\n      ),\r\n    [scrollY, scrollX, layoutHeight, layoutWidth, itemOverscan]\r\n  );\r\n\r\n  const isChannelVisible = React.useCallback(\r\n    (position: Pick<Position, \"top\">) =>\r\n      getSidebarItemVisibility(position, scrollY, layoutHeight, itemOverscan),\r\n    [scrollY, layoutHeight, itemOverscan]\r\n  );\r\n\r\n  const getEpgProps = () => ({\r\n    isRTL,\r\n    isSidebar,\r\n    isLine,\r\n    isTimeline,\r\n    width,\r\n    height,\r\n    sidebarWidth,\r\n    ref: containerRef,\r\n    theme,\r\n    globalStyles,\r\n  });\r\n\r\n  const getLayoutProps = () => ({\r\n    programs,\r\n    channels,\r\n    startDate,\r\n    endDate,\r\n    scrollY,\r\n    onScroll,\r\n    isRTL,\r\n    isBaseTimeFormat,\r\n    isSidebar,\r\n    isTimeline,\r\n    isLine,\r\n    isProgramVisible,\r\n    isChannelVisible,\r\n    dayWidth,\r\n    hourWidth,\r\n    sidebarWidth,\r\n    itemHeight,\r\n    ...dayWidthResourcesProps,\r\n    ref: scrollBoxRef,\r\n  });\r\n\r\n  return {\r\n    getEpgProps,\r\n    getLayoutProps,\r\n    onScrollToNow,\r\n    onScrollTop,\r\n    onScrollLeft,\r\n    onScrollRight,\r\n    scrollY,\r\n    scrollX,\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\n// Import heleprs\r\nimport { useIsomorphicLayoutEffect } from \"../helpers\";\r\n\r\nexport function useInterval(callback: () => void, delay: number | null) {\r\n  const useIsomorphicEffect = useIsomorphicLayoutEffect();\r\n  const savedCallback = React.useRef(callback);\r\n\r\n  useIsomorphicEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  React.useEffect(() => {\r\n    if (!delay && delay !== 0) {\r\n      return;\r\n    }\r\n\r\n    const id = setInterval(() => savedCallback.current(), delay);\r\n\r\n    return () => clearInterval(id);\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\r\nimport { format } from \"date-fns\";\r\n\r\n// Import types\r\nimport { ProgramItem, BaseTimeFormat } from \"../helpers/types\";\r\n\r\n// Import helpers\r\nimport { PROGRAM_REFRESH, TIME_FORMAT, getLiveStatus, omit } from \"../helpers\";\r\n\r\n// Import hooks\r\nimport { useInterval } from \"./useInterval\";\r\n\r\ninterface useProgramProps<T> {\r\n  program: T;\r\n  isRTL?: boolean;\r\n  isBaseTimeFormat: BaseTimeFormat;\r\n  minWidth?: number;\r\n}\r\n\r\nexport function useProgram<T extends ProgramItem>({\r\n  isRTL = false,\r\n  isBaseTimeFormat,\r\n  program,\r\n  minWidth = 200,\r\n}: useProgramProps<T>) {\r\n  const { data, position } = program;\r\n  const { width } = position;\r\n\r\n  const { since, till } = data;\r\n  const [isLive, setIsLive] = React.useState<boolean>(() =>\r\n    getLiveStatus(since, till)\r\n  );\r\n\r\n  const newPosition = omit(position, \"egdeEnd\");\r\n\r\n  const formatTime = (\r\n    date: string | number | Date,\r\n    formatType: string = TIME_FORMAT.HOURS_MIN\r\n  ) => format(new Date(date), formatType).replace(/\\s/g, \"\");\r\n\r\n  const set12HoursTimeFormat = () => {\r\n    if (isBaseTimeFormat) return TIME_FORMAT.BASE_HOURS_TIME;\r\n    return TIME_FORMAT.HOURS_MIN;\r\n  };\r\n\r\n  const setDayMonthFormat = () => {\r\n    if (isBaseTimeFormat) return TIME_FORMAT.BASE_HOURS_TIME;\r\n    return TIME_FORMAT.DAY_MONTH;\r\n  };\r\n\r\n  const getRTLSinceTime = (since: string | number | Date) =>\r\n    isRTL ? till : since;\r\n  const getRTLTillTime = (till: string | number | Date) =>\r\n    isRTL ? since : till;\r\n\r\n  useInterval(() => {\r\n    const status = getLiveStatus(since, till);\r\n    setIsLive(status);\r\n  }, PROGRAM_REFRESH);\r\n\r\n  const isMinWidth = width > minWidth;\r\n\r\n  return {\r\n    isLive,\r\n    isMinWidth,\r\n    isRTL,\r\n    formatTime,\r\n    set12HoursTimeFormat,\r\n    setDayMonthFormat,\r\n    getRTLSinceTime,\r\n    getRTLTillTime,\r\n    styles: { width, position: newPosition },\r\n  };\r\n}\r\n","import { format } from \"date-fns\";\r\n\r\n// Import types\r\nimport { BaseTimeFormat } from \"../helpers/types\";\r\n\r\n// Import helpers\r\nimport { TIME_FORMAT, generateArray } from \"../helpers\";\r\n\r\nexport function useTimeline(\r\n  numberOfHoursInDay: number,\r\n  isBaseTimeFormat: BaseTimeFormat\r\n) {\r\n  const time = generateArray(numberOfHoursInDay);\r\n  const dividers = generateArray(4);\r\n\r\n  const formatTime = (index: number) => {\r\n    const date = new Date();\r\n    const baseDate = format(date, TIME_FORMAT.DATE);\r\n    const time = index < 10 ? `0${index}` : index;\r\n\r\n    if (isBaseTimeFormat) {\r\n      const date = new Date(`${baseDate}T${time}:00:00`);\r\n      const timeFormat = format(date, TIME_FORMAT.BASE_HOURS_TIME);\r\n      return timeFormat.toLowerCase().replace(/\\s/g, \"\");\r\n    }\r\n\r\n    return `${time}:00`;\r\n  };\r\n\r\n  return { time, dividers, formatTime };\r\n}\r\n","import * as React from \"react\";\r\n\r\n// Import interfaces\r\nimport { Program as ProgramType } from \"../helpers/interfaces\";\r\nimport { BaseTimeFormat } from \"../helpers/types\";\r\n\r\n// Import types\r\nimport { ProgramItem } from \"../helpers/types\";\r\n\r\n// Import styles\r\nimport { ProgramStyled } from \"../styles\";\r\n\r\n// Import hooks\r\nimport { useProgram } from \"../hooks\";\r\n\r\ninterface ProgramProps<T> {\r\n  isRTL?: boolean;\r\n  isBaseTimeFormat: BaseTimeFormat;\r\n  program: T;\r\n  onClick?: (v: ProgramType) => void;\r\n}\r\n\r\nconst {\r\n  ProgramBox,\r\n  ProgramContent,\r\n  ProgramFlex,\r\n  ProgramStack,\r\n  ProgramTitle,\r\n  ProgramText,\r\n  ProgramImage,\r\n} = ProgramStyled;\r\n\r\nexport function Program<T extends ProgramItem>({\r\n  program,\r\n  onClick,\r\n  ...rest\r\n}: ProgramProps<T>) {\r\n  const {\r\n    isRTL,\r\n    isLive,\r\n    isMinWidth,\r\n    styles,\r\n    formatTime,\r\n    set12HoursTimeFormat,\r\n    getRTLSinceTime,\r\n    getRTLTillTime,\r\n  } = useProgram({\r\n    program,\r\n    ...rest,\r\n  });\r\n\r\n  const { data } = program;\r\n  const { image, title, since, till } = data;\r\n\r\n  const handleOnContentClick = () => onClick?.(data);\r\n\r\n  const sinceTime = formatTime(\r\n    getRTLSinceTime(since),\r\n    set12HoursTimeFormat()\r\n  ).toLowerCase();\r\n  const tillTime = formatTime(\r\n    getRTLTillTime(till),\r\n    set12HoursTimeFormat()\r\n  ).toLowerCase();\r\n\r\n  return (\r\n    <ProgramBox\r\n      data-testid=\"program-item\"\r\n      width={styles.width}\r\n      style={styles.position}\r\n    >\r\n      <ProgramContent\r\n        data-testid=\"program-content\"\r\n        width={styles.width}\r\n        isLive={isLive}\r\n        onClick={handleOnContentClick}\r\n        {...rest}\r\n      >\r\n        <ProgramFlex>\r\n          {isLive && isMinWidth && <ProgramImage src={image} alt=\"Preview\" />}\r\n          <ProgramStack isRTL={isRTL}>\r\n            <ProgramTitle>{title}</ProgramTitle>\r\n            <ProgramText aria-label=\"program time\">\r\n              {sinceTime} - {tillTime}\r\n            </ProgramText>\r\n          </ProgramStack>\r\n        </ProgramFlex>\r\n      </ProgramContent>\r\n    </ProgramBox>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n// Import interfaces\r\nimport { ChannelWithPosiiton } from \"../helpers/types\";\r\n\r\n// Import styles\r\nimport { ChannelsStyled } from \"../styles\";\r\n\r\n// Import Components\r\nimport { Channel } from \"../components\";\r\n\r\ninterface ChannelsProps {\r\n  isTimeline: boolean;\r\n  isRTL: boolean;\r\n  isChannelVisible: (position: any) => boolean;\r\n  channels: ChannelWithPosiiton[];\r\n  scrollY: number;\r\n  sidebarWidth: number;\r\n  renderChannel?: (v: { channel: ChannelWithPosiiton }) => React.ReactNode;\r\n}\r\n\r\nconst { Box } = ChannelsStyled;\r\n\r\nexport function Channels(props: ChannelsProps) {\r\n  const { channels, scrollY, sidebarWidth, renderChannel } = props;\r\n  const { isRTL, isTimeline, isChannelVisible } = props;\r\n\r\n  const renderChannels = (channel: ChannelWithPosiiton) => {\r\n    const isVisible = isChannelVisible(channel.position);\r\n    if (isVisible) {\r\n      if (renderChannel) return renderChannel({ channel });\r\n      return <Channel key={channel.uuid} channel={channel} />;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      data-testid=\"sidebar\"\r\n      isRTL={isRTL}\r\n      isTimeline={isTimeline}\r\n      width={sidebarWidth}\r\n      bottom={scrollY}\r\n    >\r\n      {channels.map(renderChannels)}\r\n    </Box>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\n// Import interfaces\r\nimport { ChannelWithPosiiton } from \"../helpers/types\";\r\n\r\n// Import styles\r\nimport { ChannelStyled } from \"../styles\";\r\n\r\ninterface ChannelProps<T> {\r\n  channel: T;\r\n  onClick?: (v: ChannelWithPosiiton) => void;\r\n}\r\n\r\nconst { ChannelBox, ChannelLogo } = ChannelStyled;\r\n\r\nexport function Channel<T extends ChannelWithPosiiton>({\r\n  channel,\r\n  onClick,\r\n  ...rest\r\n}: ChannelProps<T>) {\r\n  const { position, logo } = channel;\r\n  return (\r\n    <ChannelBox\r\n      data-testid=\"sidebar-item\"\r\n      onClick={() => onClick?.(channel)}\r\n      {...position}\r\n      {...rest}\r\n    >\r\n      <ChannelLogo src={logo} alt=\"Logo\" />\r\n    </ChannelBox>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\n\r\n// Import types\r\nimport { BaseTimeFormat } from \"../helpers/types\";\r\n\r\n// Import styles\r\nimport { TimelineStyled } from \"../styles\";\r\n\r\n// Import hooks\r\nimport { useTimeline } from \"../hooks\";\r\n\r\nconst {\r\n  TimelineWrapper,\r\n  TimelineBox,\r\n  TimelineTime,\r\n  TimelineDividers,\r\n  TimelineDivider,\r\n} = TimelineStyled;\r\n\r\ninterface TimelineProps {\r\n  isRTL?: boolean;\r\n  isBaseTimeFormat: BaseTimeFormat;\r\n  isSidebar: boolean;\r\n  dayWidth: number;\r\n  hourWidth: number;\r\n  numberOfHoursInDay: number;\r\n  offsetStartHoursRange: number;\r\n  sidebarWidth: number;\r\n}\r\n\r\nexport function Timeline({\r\n  isRTL,\r\n  isBaseTimeFormat,\r\n  isSidebar,\r\n  dayWidth,\r\n  hourWidth,\r\n  numberOfHoursInDay,\r\n  offsetStartHoursRange,\r\n  sidebarWidth,\r\n}: TimelineProps) {\r\n  const { time, dividers, formatTime } = useTimeline(\r\n    numberOfHoursInDay,\r\n    isBaseTimeFormat\r\n  );\r\n\r\n  const renderTime = (index: number) => (\r\n    <TimelineBox data-testid=\"timeline-item\" key={index} width={hourWidth}>\r\n      <TimelineTime isBaseTimeFormat={isBaseTimeFormat} isRTL={isRTL}>\r\n        {formatTime(index + offsetStartHoursRange)}\r\n      </TimelineTime>\r\n      <TimelineDividers>{renderDividers()}</TimelineDividers>\r\n    </TimelineBox>\r\n  );\r\n\r\n  const renderDividers = () =>\r\n    dividers.map((_, index) => (\r\n      <TimelineDivider key={index} width={hourWidth} />\r\n    ));\r\n\r\n  return (\r\n    <TimelineWrapper\r\n      data-testid=\"timeline\"\r\n      dayWidth={dayWidth}\r\n      sidebarWidth={sidebarWidth}\r\n      isSidebar={isSidebar}\r\n    >\r\n      {time.map((_, index) => renderTime(index))}\r\n    </TimelineWrapper>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { isToday } from \"date-fns\";\r\n\r\n// Import types\r\nimport { DateTime } from \"../../helpers/types\";\r\n\r\n// Import styles\r\nimport { LineStyled } from \"../../styles\";\r\n\r\n// Import components\r\nimport { useLine } from \"./useLine\";\r\n\r\ninterface LineProps {\r\n  height: number;\r\n  startDate: DateTime;\r\n  endDate: DateTime;\r\n  dayWidth: number;\r\n  hourWidth: number;\r\n  sidebarWidth: number;\r\n}\r\n\r\nconst { Box } = LineStyled;\r\n\r\nexport function Line({\r\n  height,\r\n  startDate,\r\n  endDate,\r\n  dayWidth,\r\n  hourWidth,\r\n  sidebarWidth,\r\n}: LineProps) {\r\n  const { positionX } = useLine({\r\n    startDate,\r\n    endDate,\r\n    dayWidth,\r\n    hourWidth,\r\n    sidebarWidth,\r\n  });\r\n\r\n  const date = new Date(startDate);\r\n  if (!isToday(date)) return null;\r\n\r\n  return <Box height={height} left={positionX} />;\r\n}\r\n","import React from \"react\";\r\nimport { startOfDay } from \"date-fns\";\r\n\r\n// Import types\r\nimport { DateTime } from \"../../helpers/types\";\r\n\r\n// Import helpers\r\nimport { HOUR_IN_MINUTES, PROGRAM_REFRESH, getPositionX } from \"../../helpers\";\r\n\r\n// Import hooks\r\nimport { useInterval } from \"../../hooks\";\r\n\r\ninterface useLineProps {\r\n  startDate: DateTime;\r\n  endDate: DateTime;\r\n  dayWidth: number;\r\n  hourWidth: number;\r\n  sidebarWidth: number;\r\n}\r\n\r\nexport function useLine({\r\n  startDate,\r\n  endDate,\r\n  dayWidth,\r\n  hourWidth,\r\n  sidebarWidth,\r\n}: useLineProps) {\r\n  const initialState =\r\n    getPositionX(\r\n      startOfDay(new Date(startDate)),\r\n      new Date(),\r\n      startDate,\r\n      endDate,\r\n      hourWidth\r\n    ) + sidebarWidth;\r\n  const [positionX, setPositionX] = React.useState<number>(() => initialState);\r\n\r\n  const isDayEnd = positionX <= dayWidth;\r\n  const isScrollX = React.useMemo(() => (isDayEnd ? PROGRAM_REFRESH : null), [\r\n    isDayEnd,\r\n  ]);\r\n\r\n  useInterval(() => {\r\n    const offset = hourWidth / HOUR_IN_MINUTES;\r\n    const positionOffset = offset * 2;\r\n    setPositionX((prev) => prev + positionOffset);\r\n  }, isScrollX);\r\n\r\n  React.useEffect(() => {\r\n    const date = new Date(startDate);\r\n    const positionX = getPositionX(\r\n      startOfDay(date),\r\n      new Date(),\r\n      startDate,\r\n      endDate,\r\n      hourWidth\r\n    );\r\n    const newPositionX = positionX + sidebarWidth;\r\n    setPositionX(newPositionX);\r\n  }, [startDate, endDate, sidebarWidth, hourWidth]);\r\n\r\n  return { positionX };\r\n}\r\n","import * as React from \"react\";\r\nimport { theme } from \"../theme/theme\";\r\n\r\n// Import styles\r\nimport { LoaderStyled } from \"../styles\";\r\n\r\nconst { Box, Shape } = LoaderStyled;\r\n\r\nconst Element = ({\r\n  width,\r\n  color,\r\n  animate,\r\n  marginRight,\r\n  transition,\r\n}: {\r\n  width: number;\r\n  color: string;\r\n  transition: { duration: number; ease?: string; delay?: number };\r\n  animate: { right: string[] };\r\n  marginRight?: number;\r\n}) => (\r\n  <Shape\r\n    className=\"SHAPE\"\r\n    width={width}\r\n    color={color}\r\n    animate={animate}\r\n    transition={transition}\r\n    marginRight={marginRight}\r\n  />\r\n);\r\n\r\nexport function Loader() {\r\n  return (\r\n    <Box aria-label=\"loading\">\r\n      <div>\r\n        <div\r\n          style={{ display: \"flex\", justifyContent: \"end\", marginBottom: 16 }}\r\n        >\r\n          <Element\r\n            animate={{\r\n              right: [\"0px\", \"75px\", \"0px\"],\r\n            }}\r\n            transition={{\r\n              duration: 1,\r\n            }}\r\n            width={217}\r\n            color={theme.loader.teal}\r\n            marginRight={10}\r\n          />\r\n          <Element\r\n            width={122}\r\n            color={theme.loader.purple}\r\n            animate={{\r\n              right: [\"0px\", \"50px\", \"0px\"],\r\n            }}\r\n            transition={{\r\n              duration: 1,\r\n              delay: 0.02,\r\n            }}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{ display: \"flex\", justifyContent: \"end\", marginBottom: 16 }}\r\n        >\r\n          <Element\r\n            width={267}\r\n            color={theme.loader.pink}\r\n            animate={{\r\n              right: [\"0px\", \"70px\", \"0px\"],\r\n            }}\r\n            transition={{\r\n              delay: 0.5,\r\n              duration: 1,\r\n            }}\r\n          />\r\n        </div>\r\n        <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n          <Element\r\n            width={217}\r\n            color={theme.loader.purple}\r\n            marginRight={10}\r\n            animate={{\r\n              right: [\"0px\", \"95px\", \"0px\"],\r\n            }}\r\n            transition={{\r\n              delay: 0.3,\r\n              duration: 1,\r\n            }}\r\n          />\r\n          <Element\r\n            width={80}\r\n            color={theme.loader.teal}\r\n            animate={{\r\n              right: [\"0px\", \"70px\", \"0px\"],\r\n            }}\r\n            transition={{\r\n              duration: 1,\r\n              delay: 0.33,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ThemeProvider, Global } from \"@emotion/react\";\r\n\r\n// Import interfaces\r\nimport { Theme } from \"./helpers/interfaces\";\r\n\r\n// Import helpers\r\nimport { TIMELINE_HEIGHT } from \"./helpers\";\r\n\r\n// Import styles\r\nimport { globalStyles, EpgStyled } from \"./styles\";\r\n\r\n// Import components\r\nimport { Loader } from \"./components\";\r\n\r\ninterface EpgProps {\r\n  width?: number;\r\n  height?: number;\r\n  isRTL?: boolean;\r\n  isSidebar: boolean;\r\n  isTimeline?: boolean;\r\n  isLoading?: boolean;\r\n  children: React.ReactNode;\r\n  loader?: React.ReactNode;\r\n  theme: Theme;\r\n  globalStyles?: string;\r\n  sidebarWidth: number;\r\n}\r\n\r\nconst { Container, Wrapper, Box } = EpgStyled;\r\n\r\nexport const Epg = React.forwardRef<HTMLDivElement, EpgProps>(\r\n  (\r\n    {\r\n      children,\r\n      width,\r\n      height,\r\n      sidebarWidth,\r\n      theme,\r\n      globalStyles: customGlobalStyles,\r\n      isRTL = false,\r\n      isSidebar = true,\r\n      isTimeline = true,\r\n      isLoading = false,\r\n      loader: LoaderComponent,\r\n      ...rest\r\n    },\r\n    containerRef\r\n  ) => {\r\n    const renderLoader = () => LoaderComponent ?? <Loader />;\r\n    const epgGlobalStyles = customGlobalStyles ?? globalStyles;\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Global styles={epgGlobalStyles} />\r\n        <Container\r\n          className=\"planby\"\r\n          data-testid=\"container\"\r\n          width={width}\r\n          height={height}\r\n          ref={containerRef}\r\n          {...rest}\r\n        >\r\n          <Wrapper>\r\n            {isSidebar && isTimeline && (\r\n              <Box\r\n                isRTL={isRTL}\r\n                width={sidebarWidth}\r\n                height={TIMELINE_HEIGHT}\r\n                left={0}\r\n                top={0}\r\n              />\r\n            )}\r\n            {isLoading && renderLoader()}\r\n            {children}\r\n          </Wrapper>\r\n        </Container>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n);\r\n","import { ProgramStyled, ChannelStyled, TimelineStyled } from \"./styles\";\r\n\r\n// Import types\r\nimport { Theme as ThemeType, Program as IProgram } from \"./helpers/interfaces\";\r\nimport {\r\n  ProgramItem as ProgramItemType,\r\n  ChannelWithPosiiton,\r\n  BaseTimeFormat as BaseTimeFormatType,\r\n} from \"./helpers/types\";\r\n\r\n// Types\r\nexport type Theme = ThemeType;\r\nexport type Channel = ChannelWithPosiiton;\r\nexport type Program = IProgram;\r\nexport type ProgramItem = {\r\n  program: ProgramItemType;\r\n  isRTL: boolean;\r\n  isBaseTimeFormat: BaseTimeFormatType;\r\n};\r\n\r\n// Components\r\nexport { Layout } from \"./components\";\r\nexport { Epg } from \"./Epg\";\r\nexport { useEpg, useProgram, useTimeline } from \"./hooks\";\r\n\r\n// Styles\r\nconst { ChannelBox, ChannelLogo } = ChannelStyled;\r\n\r\nconst {\r\n  ProgramBox,\r\n  ProgramContent,\r\n  ProgramFlex,\r\n  ProgramStack,\r\n  ProgramTitle,\r\n  ProgramText,\r\n  ProgramImage,\r\n} = ProgramStyled;\r\n\r\nconst {\r\n  TimelineWrapper,\r\n  TimelineBox,\r\n  TimelineTime,\r\n  TimelineDivider,\r\n  TimelineDividers,\r\n} = TimelineStyled;\r\n\r\nexport {\r\n  // Channel\r\n  ChannelBox,\r\n  ChannelLogo,\r\n  // Program\r\n  ProgramBox,\r\n  ProgramContent,\r\n  ProgramFlex,\r\n  ProgramStack,\r\n  ProgramTitle,\r\n  ProgramText,\r\n  ProgramImage,\r\n  // Timeline\r\n  TimelineWrapper,\r\n  TimelineBox,\r\n  TimelineTime,\r\n  TimelineDividers,\r\n  TimelineDivider,\r\n};\r\n","import React from \"react\";\r\nimport { useDebouncedCallback } from \"use-debounce\";\r\nimport { startOfToday, isToday as isTodayFns } from \"date-fns\";\r\n\r\n// Import types\r\nimport { DateTime } from \"../helpers/types\";\r\n\r\n// Import heleprs\r\nimport {\r\n  DEBOUNCE_WAIT,\r\n  DEBOUNCE_WAIT_MAX,\r\n  getPositionX,\r\n  useIsomorphicLayoutEffect,\r\n} from \"../helpers\";\r\n\r\ninterface useLayoutProps {\r\n  height?: number;\r\n  width?: number;\r\n  hourWidth: number;\r\n  sidebarWidth: number;\r\n  startDate: DateTime;\r\n  endDate: DateTime;\r\n}\r\n\r\nexport function useLayout({\r\n  height,\r\n  width,\r\n  startDate,\r\n  endDate,\r\n  hourWidth,\r\n  sidebarWidth,\r\n}: useLayoutProps) {\r\n  const useIsomorphicEffect = useIsomorphicLayoutEffect();\r\n\r\n  const containerRef = React.useRef<HTMLDivElement>(null);\r\n  const scrollBoxRef = React.useRef<HTMLDivElement>(null);\r\n  //-------- State --------\r\n  const [scrollY, setScrollY] = React.useState<number>(0);\r\n  const [scrollX, setScrollX] = React.useState<number>(0);\r\n  const [layoutWidth, setLayoutWidth] = React.useState<number>(width as number);\r\n  const [layoutHeight, setLayoutHeight] = React.useState<number>(\r\n    height as number\r\n  );\r\n  const isToday = isTodayFns(new Date(startDate));\r\n\r\n  // -------- Handlers --------\r\n  const handleScrollDebounced = useDebouncedCallback(\r\n    (value) => {\r\n      setScrollY(value.y);\r\n      setScrollX(value.x);\r\n    },\r\n    DEBOUNCE_WAIT,\r\n    { maxWait: DEBOUNCE_WAIT_MAX }\r\n  );\r\n\r\n  const handleOnScroll = React.useCallback(\r\n    (e: React.UIEvent<HTMLDivElement, UIEvent> & { target: Element }) => {\r\n      handleScrollDebounced({ y: e.target.scrollTop, x: e.target.scrollLeft });\r\n    },\r\n    [handleScrollDebounced]\r\n  );\r\n\r\n  const handleOnScrollToNow = React.useCallback(() => {\r\n    if (scrollBoxRef?.current && isToday) {\r\n      const clientWidth = (width ??\r\n        containerRef.current?.clientWidth) as number;\r\n\r\n      const newDate = new Date();\r\n      const scrollPosition = getPositionX(\r\n        startOfToday(),\r\n        newDate,\r\n        startDate,\r\n        endDate,\r\n        hourWidth\r\n      );\r\n      const scrollNow = scrollPosition - clientWidth / 2 + sidebarWidth;\r\n      scrollBoxRef.current.scrollLeft = scrollNow;\r\n    }\r\n  }, [isToday, startDate, endDate, width, sidebarWidth, hourWidth]);\r\n\r\n  const handleOnScrollTop = React.useCallback(\r\n    (value: number = hourWidth) => {\r\n      if (scrollBoxRef?.current) {\r\n        const top = scrollBoxRef.current.scrollTop + value;\r\n        scrollBoxRef.current.scrollTop = top;\r\n      }\r\n    },\r\n    [hourWidth]\r\n  );\r\n\r\n  const handleOnScrollRight = React.useCallback(\r\n    (value: number = hourWidth) => {\r\n      if (scrollBoxRef?.current) {\r\n        const right = scrollBoxRef.current.scrollLeft + value;\r\n        scrollBoxRef.current.scrollLeft = right;\r\n      }\r\n    },\r\n    [hourWidth]\r\n  );\r\n\r\n  const handleOnScrollLeft = React.useCallback(\r\n    (value: number = hourWidth) => {\r\n      if (scrollBoxRef?.current) {\r\n        const left = scrollBoxRef.current.scrollLeft - value;\r\n        scrollBoxRef.current.scrollLeft = left;\r\n      }\r\n    },\r\n    [hourWidth]\r\n  );\r\n\r\n  const handleResizeDebounced = useDebouncedCallback(\r\n    () => {\r\n      if (containerRef?.current && !width) {\r\n        const container = containerRef.current;\r\n        const { clientWidth } = container;\r\n        setLayoutWidth(clientWidth);\r\n      }\r\n    },\r\n    DEBOUNCE_WAIT * 4,\r\n    { maxWait: DEBOUNCE_WAIT_MAX * 4 }\r\n  );\r\n\r\n  // -------- Efffects --------\r\n  useIsomorphicEffect(() => {\r\n    if (containerRef?.current) {\r\n      const container = containerRef.current;\r\n      if (!width) {\r\n        const { clientWidth } = container;\r\n        setLayoutWidth(clientWidth);\r\n      }\r\n      if (!height) {\r\n        const { clientHeight } = container;\r\n        setLayoutHeight(clientHeight);\r\n      }\r\n    }\r\n\r\n    if (scrollBoxRef?.current && isToday) {\r\n      handleOnScrollToNow();\r\n    }\r\n  }, [height, width, startDate, isToday, handleOnScrollToNow]);\r\n\r\n  useIsomorphicEffect(() => {\r\n    window.addEventListener(\"resize\", handleResizeDebounced);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResizeDebounced);\r\n    };\r\n  }, [width]);\r\n\r\n  return {\r\n    containerRef,\r\n    scrollBoxRef,\r\n    scrollX,\r\n    scrollY,\r\n    layoutWidth,\r\n    layoutHeight,\r\n    onScroll: handleOnScroll,\r\n    onScrollToNow: handleOnScrollToNow,\r\n    onScrollTop: handleOnScrollTop,\r\n    onScrollLeft: handleOnScrollLeft,\r\n    onScrollRight: handleOnScrollRight,\r\n  };\r\n}\r\n"],"names":["globalStyles","css","Container","target","height","width","Wrapper","name","styles","ScrollBox","theme","primary","isRTL","scrollbar","thumb","bg","white","Box","top","_ref15$left","left","Content","isSidebar","sidebarWidth","bottom","ChannelBox","ChannelLogo","ProgramBox","ProgramContent","gradient","blue","isLive","ProgramFlex","Elipsis","ProgramTitle","grey","ProgramText","text","ProgramImage","ProgramStack","generateArray","num","Array","fill","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","getDate","date","Date","abs","Math","getTime","getLiveStatus","since","till","nowTime","sinceTime","sinceTill","formatTime","format","replace","roundToMinutes","roundToNearestMinutes","getItemDiffWidth","diff","hourWidth","getPositionX","startDate","endDate","isTomorrow","isYesterday","diffTime","differenceInMinutes","getChannelPosition","channelIndex","itemHeight","TimelineTime","isBaseTimeFormat","TimelineDividers","TimelineDivider","timeline","divider","TimelineWrapper","ITEM_HEIGHT","dayWidth","TimelineBox","green","time","loader","Shape","color","marginRight","animate","keyframes","map","item","index","right","transition","duration","ease","delay","EpgStyled","Layout","React","forwardRef","props","scrollBoxRef","channels","programs","scrollY","numberOfHoursInDay","offsetStartHoursRange","_props$isTimeline","isTimeline","_props$isLine","isLine","_props$isBaseTimeForm","_props$isRTL","onScroll","isProgramVisible","isChannelVisible","renderProgram","renderChannel","renderTimeline","channelsLength","length","contentHeight","useMemo","isFuture","ref","Line","timeProps","Timeline","renderTopbar","Channels","program","position","options","getProgramOptions","Program","key","data","id","renderPrograms","600","900","300","teal","purple","pink","border","500","defaultStartDateTime","startOfToday","useInterval","callback","useIsomorphicEffect","savedCallback","useRef","current","setInterval","clearInterval","useProgram","_ref$minWidth","minWidth","useState","setIsLive","newPosition","obj","result","property","omit","status","isMinWidth","formatType","set12HoursTimeFormat","setDayMonthFormat","getRTLSinceTime","getRTLTillTime","useTimeline","dividers","baseDate","toLowerCase","ProgramStyled","onClick","rest","image","title","tillTime","style","src","alt","ChannelsStyled","channel","Channel","uuid","ChannelStyled","logo","TimelineStyled","_","renderTime","LineStyled","positionX","initialState","startOfDay","setPositionX","isDayEnd","positionOffset","prev","useLine","isToday","LoaderStyled","Element","className","Loader","display","justifyContent","marginBottom","Epg","containerRef","children","customGlobalStyles","_ref$isRTL","_ref$isSidebar","_ref$isTimeline","_ref$isLoading","isLoading","LoaderComponent","ThemeProvider","Global","channelsEpg","epg","_ref$startDate","_ref$endDate","_ref$isBaseTimeFormat","_ref$isLine","customTheme","_ref$dayWidth","customDayWidth","_ref$sidebarWidth","_ref$itemHeight","_ref$itemOverscan","itemOverscan","endDateValue","addDays","getTimeRangeDates","startDateTime","endDateTime","console","error","differenceInHours","floor","newDayWidth","getDayWidthResources","dayWidthResourcesProps","setScrollY","scrollX","setScrollX","layoutWidth","setLayoutWidth","layoutHeight","setLayoutHeight","isTodayFns","handleScrollDebounced","useDebouncedCallback","value","y","x","maxWait","handleOnScroll","useCallback","e","scrollTop","scrollLeft","handleOnScrollToNow","clientWidth","_containerRef$current","newDate","scrollPosition","handleOnScrollTop","handleOnScrollRight","handleOnScrollLeft","handleResizeDebounced","DEBOUNCE_WAIT","DEBOUNCE_WAIT_MAX","container","clientHeight","addEventListener","removeEventListener","onScrollToNow","onScrollTop","onScrollLeft","onScrollRight","useLayout","layoutProps","getConvertedChannels","next","findIndex","channelUuid","isYesterdayTime","edgeEnd","getProgramPosition","getConvertedPrograms","defaultTheme","containerHeight","containerWidth","getItemVisibility","getSidebarItemVisibility","getEpgProps","getLayoutProps"],"mappings":"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"}